{"version":3,"sources":["components/Input.js","components/Button.js","components/Header.js","utils/Api.js","components/ProfileList.js","components/All.js","App.js","serviceWorker.js","index.js"],"names":["Input","state","name","handleInputChange","event","value","target","setState","handleFormSubmit","preventDefault","people","All","console","log","new_array","i","length","first","push","last","className","type","id","placeholder","onChange","this","Component","Button","props","onClick","click","Header","onclick","sortPeople","axios","get","ProfileList","src","image","alt","first_name","last_name","cell","email","searchPeople","Api","then","res","data","results","catch","err","newArray","sort","map","item","picture","large","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.18fd5d29.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nimport All from \"./All\"\n\n\nclass Input extends Component {\n\n    state = {\n        name: \"\"\n    };\n\n    handleInputChange = event => {\n\n        const value = event.target.value;\n        const name = event.target.name;\n\n        this.setState({\n            [name]: value\n        });\n    };\n\n    handleFormSubmit = event => {\n        event.preventDefault();\n        let people = All.state.people;\n        console.log(people)\n        let new_array = [];\n\n        for (var i = 0; i < people.length; i++) {\n            if (people[i].name.first === this.state.name) {\n                new_array.push(people[i]);\n            }\n            if (people[i].name.last === this.state.name) {\n                new_array.push(people[i]);\n            }\n        }\n        All.setState({ people: new_array })\n    };\n\n\n\n    render() {\n        return (\n            <div>\n                <div className=\"form-group input\">\n                    <input type=\"text\" className=\"form-control\" id=\"exampleInput\" placeholder=\"Search\" onChange={this.handleFormSubmit}>\n                    </input>\n                </div>\n            </div >)\n    }\n\n}\n\nexport default Input;","import React from \"react\"\n\n\nfunction Button(props) {\n    return (\n        <div>\n            <button type=\"button\" className=\"btn btn-primary input\" onClick={props.click}>{props.name}</button>\n        </div>)\n}\n\nexport default Button;","import React from \"react\"\nimport All from \"./All\"\nimport Button from \"./Button\"\n\nfunction Header() {\n    return (\n\n        <ul className=\"nav justify-content-center header\">\n\n            <div className=\"col-12\">\n                <h1 className=\"head\" >Employee Directory</h1>\n            </div>\n\n            <div className=\"row\">\n                <div className=\"col-2\"></div>\n                <li className=\"nav-item col-3\">\n                    <Button name=\"SORT1\" onclick={All.sortPeople} />\n                </li>\n                <li className=\"nav-item col-3\">\n                    <Button name=\"SORT2\" />\n                </li>\n                <li className=\"nav-item col-3\">\n                    <Button name=\"SORT3\" />\n                </li>\n                <div className=\"col-2\"></div>\n            </div>\n        </ul>\n\n    );\n}\nexport default Header;\n","import axios from \"axios\";\nconst BASEURL = \"https://randomuser.me/api/?results=20\";\n\n\nexport default {\n    search: function () {\n        return axios.get(BASEURL);\n    }\n};\n\n\n\n","import React from \"react\"\n\n\n\nfunction ProfileList(props) {\n\n    return (\n        <div>\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col-12 mt-3\">\n                        <div className=\"card\">\n                            <div className=\"card-horizontal\">\n                                <div className=\"img-square-wrapper\">\n                                    <img className=\"\" src={props.image} alt=\"Card image\"></img>\n                                </div>\n                                <div className=\"card-body row\">\n                                    <h4 className=\"card-title col-6\">{props.first_name} {props.last_name}</h4>\n                                    <p className=\"card-text col-6\">{props.cell}</p>\n                                    <p className=\"card-text col-6\">{props.email}</p>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        </div>);\n}\n\n\n\nexport default ProfileList;","import React, { Component } from \"react\"\nimport Input from \"./Input\"\nimport Button from \"./Button\"\nimport Header from \"./Header\"\nimport Api from \"../utils/Api\"\nimport ProfileList from \"./ProfileList\"\n\n\nclass All extends Component {\n\n    state = {\n        people: [],\n    };\n\n    componentDidMount() {\n        this.searchPeople();\n    }\n\n    searchPeople = () => {\n        Api.search()\n            .then(res => {\n                // console.log(res.data.results)\n                this.setState({ people: res.data.results });\n                // console.log(\"this \" + JSON.stringify(this.state.people))\n            })\n            .catch(err => console.log(err));\n    };\n\n    sortPeople() {\n        console.log(\"click\")\n        let newArray = this.people.sort();\n        this.setState({ people: newArray });\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <Header />\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-3\"></div>\n                    <div className=\"col-6\">\n                        <div className=\"row\">\n                            <div className=\"col-8\">\n                                <Input />\n                            </div>\n                            <div className=\"col-4\">\n                                <Button name=\"Submit\" />\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-3\"></div>\n                </div>\n\n                <div>\n                    {this.state.people.map(item => (\n                        <ProfileList\n                            image={item.picture.large}\n                            first_name={item.name.first}\n                            last_name={item.name.last}\n                            cell={item.cell}\n                            email={item.email}\n                            id={item.id.value}\n                            key={item.id.value}\n                        />\n                    ))}\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default All;","import React from 'react';\nimport './App.css';\nimport All from \"./components/All\"\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <All />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}